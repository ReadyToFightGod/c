1) Какие два варианта отношений между родительским и дочерним классом вы можете назвать? 
Дайте краткий комментарий по каждому из них. Какие два варианта наследования им соответствуют?

1 - public (наследование типа is a (==является)) - дочерний класс может использовать все public\protected методы 
родителя
2 - private (наследование is implemented with (==сделан с помощью)) - наш класс использует медоты родителя,
но в полной мере своим родителем не является. Т.е можем использовать родительские функции внутри для своих методов, 
но совсем извне их не вызовем - придется писать геттеры для полей родительского класса (НО писать
надо в дочернем классе)

тип отношений \                     тип полей      
                   public              private     protected
public             public              private     protected
private            private              private     private

2) В каких случаях применяется ключевое слово protected?
Слово protected это дитя слов public и private - оно открывает доступ к членам класса дружественным и дочерним классам 
(т.е если изменится protected-член, то придется менять все как в родительском, так и во все дочерних классах). Поэтому
protected используют чаще всего тогда, когда наследуются только свои же классы и количество дочерних классов будет небольшое
(чтобы обновления полей не занимало много времени, так как дочерних классов будет немного).

3) Для чего нужны ключевые слова virtual, override, final?
Virtual - отмечает метод как виртуальный - тогда выполняется «наиболее» дочерний метод, который существует между родительским и дочерними классами
Override - явное указание компилятору, что этот метод переопределяет метод родителя
final - указывает, что данное определение метода конечное и дочерние классы не могут переопределить его по-своему.

4) Что такое чистая виртуальная функция и абстрактный базовый класс?
Чистая виртуальная функция — это метод класса, тело которого не определено. При создании чистой виртуальной функции, 
вместо определения, мы просто присваиваем ей значение 0. Любой класс с одной и более чистыми виртуальными 
функциями становится абстрактным классом, объекты которого создавать нельзя. Абстрактный базовый класс (интерфейс) — это класс, 
который не имеет переменных-членов и все методы которого являются чистыми виртуальными функциями

5) Какие проблемы связаны с множественным наследованием? Как они решены в языке Java?
Во-первых, может возникнуть неоднозначность, когда несколько родительских классов имеют метод с одним и тем же именем.
Во-вторых, это «алмаз смерти» - ситуация, когда один класс имеет 2 родительских класса, каждый из которых наследует 
свойства одного и того же родительского класса. Возникает много проблем, включая неоднозначность при вызове методов и копирование данных дважды.
Java просто не поддерживает множественное наследование.
