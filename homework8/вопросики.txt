1) Для чего нужны ключевые слова try, throw, catch, noexcept? Почему все исключения в C++ унаследованы от std::exception? Как называется метод у 
std::exception и его потомков, позволяющий получить информацию об ошибке?
throw используется для сигнализирования о возникновении исключения или ошибки. Сигнализирование о том, что произошло исключение, называется 
генерацией исключения (или «выбрасыванием исключения»).
try используется для определения блока стейтментов («блока try»). Блок try действует как наблюдатель в поисках исключений, которые были 
выброшены каким-либо из операторов в этом же блоке try. Он просто говорит компилятору: «Если кто-то внутри этого блока сгенерирует исключение — поймай его!».
Пока арбитр не объявит о штрафном броске, и пока этот штрафной бросок не будет выполнен, игра не возобновится. Другими словами, штрафной 
бросок должен быть обработан до возобновления игры.
catch используется для определения блока кода («блока catch»), который обрабатывает исключения определенного типа данных. (ловит исключения, выброшенные
в блоке try)
noexcept означает, что функция обещает не выбрасывать исключения самостоятельно.

std::exception — это класс, который используется в качестве родительского класса для любого исключения, которое выбрасывается в Стандартной библиотеке C++.
Благодаря std::exception мы можем настроить обработчик исключений типа std::exception, который будет ловить и обрабатывать как std::exception, 
так и все дочерние ему классы-исключения!

В std::exception есть виртуальный метод what(), который возвращает строку C-style с описанием исключения. Большинство дочерних классов переопределяют 
функцию what(), изменяя это сообщение.

2) В каких случаях следует рассматривать применение исключений? Почему, вообще говоря, их следует применять как можно реже?
Используя исключения, является проблема очистки выделенных ресурсов после генерации исключения. Если были объявлены некие динамические переменные 
(или открыты файлы и т.д), а потом функция выбрасывает исключение, то точка выполнения перейдет к обработчику catch. В результате, память, 
выделенная под переменные, никогда не освободится!(т.к. они исчезнут из области видимости программы и уйдут в свободное плавание)
Также увеличивают размер исполняемого файла и могут заставить его выполняться медленнее из-за дополнительной проверки, которая должна быть выполнена. Основное 
снижение производительности происходит при выбрасывании исключения.
Обычно исключения рассмотриваются, когда мы уверены, что наш код работает безошибочно, а вот пользователь может накосячить с данными и программа работать не сможет
(пример: функция, которая ожидает, что пользователь передаст имя файла на диске.Оная откроет этот файл, прочитает определенные данные, закроет файл и передаст определенный результат. Что будет, если пользователь ввел название несуществующего файла? Придется либо использовать исключение, либо придумывать какую-то альтернативу вывода, если такое возможно.

3) Что означает отсутствие транзакционности у блока try и к каким проблемам это может привести? Как эти проблемы решены в языке Java?
Отсутствие ранзакционности в болке try значит, что действия, произведенные в нем до возникновения исключения, не отменяются поcле его возникновения. Проблема, 
возникающая при этом была выше - организуется утечка памяти, какие-то функции, которые были прописаны в блоке после поимки ошибки не будут выполнены и т.д. В Java это
решается объявлением блока finally, в котором независимо от поимки ошибки будут произведены заданные нами действия - очистка памяти, закрытие файлов и т.п.

4) Какие действия следует предпринимать при взаимодействии с чужим кодом (встраивании, вызове), выбрасывающим исключения? Назовите 
строго два варианта. Поясните, как осуществить выбор между ними.
Реакция
Делегация
