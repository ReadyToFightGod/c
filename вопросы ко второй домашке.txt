1) Что такое стек и куча в контексте модели памяти C++? Какие переменные хранятся на стеке / в куче?

Куча - часть памяти, откуда выделяются динамические переменные. Память остается
выделенной до тех пор, пока не будет освобождена или пока программа не завершит свое выполнение. 
Доступ к динамически выделенной памяти осуществляется только через указатель. Если в ней не 
хватает места, ОС назначит ей больше. 

Стек - место, где хранятся параметры функции, локальные переменные и другая информация, связанная с 
функциями. Выделенная память остается в области видимости до тех пор, пока находится в стеке, и 
уничтожается при выходе из стека. Вся память, выделенная в стеке, обрабатывается во время 
компиляции, следовательно, доступ к этой памяти осуществляется напрямую через статические переменные. Если
в стеке не хватает места, то он просто переполяется (т.е. нет доп. памяти)

2) Каким образом связаны встроенные указатели и массивы?

В C++ компилятор преобразует массив в указатели. С помощью указателей можно манипулировать элементами 
массива, как и с помощью индексов. Адрес, хранящийся в переменной массива, является адресом первого 
элемента этого массива. Доступ к элементам может осуществляется через указатель, но информация, 
полученная из типа массива (например, его размер), не может быть доступна из типа указателя. 
Пример - использование оператора sizeof. В фиксированном массиве, оператор 
sizeof возвращает размер всего массива (длина_массива * размер_элемента). При использовании с 
указателем, оператор sizeof возвращает размер адреса памяти (в байтах).

3)Почему низкоуровневая работа с памятью небезопасна?

Грубо говоря, в памяти есть три области: первую можно читать, во второй исполняется программа и в 
третью можно писать. Если работать с адресами памяти, можно вылезти из дозволенной области в другую.
Тогда можно случайно изменяеть значение какой-то переменной, или записать информацию в ту область, из 
из которой она не считается (есть вероятность залезть в память, которую использует совершенно
другая программа). И тогда программа, в большинстве случаев, просто упадет.

4) Какие конструкции языка C++ аналогичны следующим концепциям Python: list, list.append(), list.clear(), 
for item in some_list, str?

В С++ конструкция vector (std::vector<type>) является аналогом питонного list. list.append == vector.push_back; 
list.clear() == vector.clear; for item in some_list == for(auto i : vector); str == std::string
(vector и string не включены в основу С++, поэтому надо включать <iostream> и <vector>)

5) Для чего нужен оператор delete? В чём разница между операторами delete и delete[]?

При работе с динамическими объектами надо освобождать использованную оперативку вручную, т.к. в С++ нет сборщиков
мусора и ОС "думает", что использованная память так и остается в работе. Оператор delete - удаляет память 
из-под одного объекта (переменной, например), а delete[] - освобождает память, занимаемую массивом.