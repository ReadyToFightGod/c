1) Как обратиться к полям структуры? Как обратиться к полям структуры, имея указатель? Как инициализировать структуру? Как задать значения по умолчанию для полей структуры?

2) Что такое битовое поле? В каких случаях оно используется?

3) Что такое объединение? Каким образом переменные хранятся внутри объединения? С какой целью объединения использовались раньше и почему они практически не используются сейчас?

4) Что такое перегрузка операторов? Как она осуществляется?
Перегрузка оператора - это то же самое, что перегрузка функции (тк в С++ операторы это функции). Когда мы перегружаем оператор, мы определяем его новые версии, которые могут работать с разными типами данных (включая классы). Чтобы перегрузить оператор, надо указать новый тип, с которым он теперь может работать, затем сам оператор и его аргументы, способ работы: new_type operator-и-вот-тут-без-пробела-сам-оператор(type1 arg1,.....){how_it_works}

5) Почему передача объектов типа std::ostream и std::istream в операторы вывода и ввода соответственно осуществляется по ссылке? Почему из них затем возвращаются эти ссылки?

6) Для чего применяется перечисление с областью видимости enum class? В каких случаях используется конструкция switch-case-default и как она устроена?
Еnum class нужен в тех случаях, когда нужно показать, что некая переменная должна принимать значения только из указанного списка. Переменные в enum class не могут неявно преобразовываться в целочисленные переменные и обратно (например, а б в не будет совпадать с 1 2 3, только если не присвоить а значение 1). Это позволяет объявлять много классов перечисления, члены которых имеют одинаковые имена.
Конструкция switch-case-default работает как оператор if - switch задает какое-то значение, case проверяет его соответствие с тем, что стоит под case и при совпадении выполняется та часть кода, которая стоит после данного cаse. Если соответствий не было, то программа уходит в ветку default. Применяют такую конструкцию для замены более длинного else-if при сравнении значения с разными константами.
