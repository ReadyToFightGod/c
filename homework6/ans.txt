1) Что такое rvalue-ссылка? Объясните своими словами. Как принять аргумент в функцию по rvalue-ссылке?
rvalue-ссылка говорит, что данные по ней надо не копировать, а перемещать. rvalue-ссылка позволяет создавать код, который переносит ресурсы 
(например, динамически выделяемую память) из одного объекта в другой, в том числе и из временных объектов, на которые 
невозможно ссылаться из других мест в программе. При это не производится дополнительное копирование.
Инициализироать ссылку можно с помощью &&, и тогда в качестве аргумента будет выступать ссылка Type&& arg. (еще можно с помощью std::move,
но об этом в 3 вопросе)

2) Для чего нужно ключевое слово explicit? В каком случае его не рекомендуется использовать? Что означает = delete; при объявлении метода?
explicit предотвращает неявное преобразование типов при инициализации (компилятор не сможет неявно вызвать конструктор, чтобы преобразовать 
один тип данных в пользоваьельский тип). Не рекомендуется использовать с любыми числовыми типами. =delete означает, что функция удалена и ее вызов
даст ошибку (этим словом мы запретили данный метод) 

3) В каких случаях применяется функция std::move?
std::move() — это функция, которая конвертирует передаваемый аргумент в r-value. Мы можем передать l-value в функцию std::move(), и std::move() 
вернет нам ссылку r-value. Функция применяется, когда надо обменять значения двух переменных, создать новый указаль на что-либо и т.д, т.е тогда, когда
нужно обрабатывать l-value как r-value, чтобы избежать ненужного копирования.

4) Перечислите известные вам специальные функции-члены класса.
конструктор, деструктор, оператор присваивания, копи конструктор

5) Что такое глубокое и поверхностное копирование? Какой вид копирования осуществляется при: Копировании std::vector и std::string в C++? Копировании list в Python?
При поверхностном копировании копируется только адрес указателя — никаких действий по содержимому адреса указателя не предпринимается. (и тут возникает проблема,
что можно сделать 2 разных указателя для одного и того же объекта) При глубоком копировании память сначала выделяется для копирования адреса, который содержит 
исходный указатель, а затем для копирования фактического значения. В С++ вектор и строка копируются глубоко, а лист в питоне - поверхностно.
